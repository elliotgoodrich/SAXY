/*************************************************************************//**
 * \file   stack_allocator.hpp
 * \author Elliot Goodrich
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ****************************************************************************/

#ifndef INCLUDE_GUARD_B7EB083A_A297_49C1_8341_9AC541672F93
#define INCLUDE_GUARD_B7EB083A_A297_49C1_8341_9AC541672F93

#include <cstddef>
#include <new>
#include <type_traits>

namespace saxy {

struct buffer {
	char* begin;
	char* current;
	char* end;

	buffer(char* buf, std::size_t size)
	: begin(buf)
	, current(buf)
	, end(buf + size) {
	}
};

template <typename T>
class stack_allocator {
	buffer* m_buffer;

	template <typename U>
	friend class stack_allocator;

public:
	typedef stack_allocator<T> other;

	typedef T value_type;
	typedef T* pointer;
	typedef T const* const_pointer;
	typedef T& reference;
	typedef T const& const_reference;
	typedef std::size_t size_type;
	typedef std::ptrdiff_t difference_type;
	typedef typename std::false_type propagate_on_container_copy_assignment;
	typedef typename std::false_type propagate_on_container_move_assignment;
	typedef typename std::false_type propagate_on_container_swap;

	stack_allocator(buffer& buf)
	: m_buffer(&buf) {
	}

	template <typename U>
	stack_allocator(stack_allocator<U> const& other)
	: m_buffer(other.m_buffer) {
	}

	pointer allocate(size_type n, void* hint = 0) {
		(void)hint;
		std::size_t const requested = n * sizeof(T);
		std::size_t const remaining = static_cast<char*>(m_buffer->end) - static_cast<char*>(m_buffer->current);
		if(requested > remaining) {
			return static_cast<pointer>(::operator new(requested));
		} else {
			pointer p = reinterpret_cast<pointer>(m_buffer->current);
			m_buffer->current += requested;
			return p;
		}
	}

	void deallocate(pointer x, size_type) {
		std::less<void*> comp;
		auto y = static_cast<void*>(x);
		if(comp(y, static_cast<void*>(m_buffer->begin)) || comp(static_cast<void*>(m_buffer->end), y)) {
			::operator delete(x);
		}
	}

	size_type max_size() const {
		return -1;
	}

	template <typename Other>
	struct rebind {
		typedef stack_allocator<Other> other;
	};
};

}

#endif
